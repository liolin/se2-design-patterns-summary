#+TITLE: Design Patterns - Summary
#+AUTHOR: Olivier Lischer
#+EMAIL: olivier.lischer@ost.ch

#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[table,xcdraw]{xcolor}
#+LATEX_HEADER: \usepackage{paralist}
#+LATEX_HEADER: \usepackage{datetime2}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{lscape}
#+LATEX_HEADER: \usepackage{longtable}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage[a4paper, left=3cm, right=3cm, top=2cm]{geometry}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{textcomp}
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{algpseudocode}

#+LATEX_HEADER: \setlist{noitemsep}
#+LATEX_HEADER: \setlength{\columnseprule}{0.2pt}
#+LATEX_HEADER: \definecolor{mygreen}{rgb}{0,0.6,0}
#+LATEX_HEADER: \definecolor{mygray}{rgb}{0.5,0.5,0.5}
#+LATEX_HEADER: \definecolor{mymauve}{rgb}{0.58,0,0.82}

#+LATEX_HEADER: \lstset{ backgroundcolor=\color{white}, basicstyle=\footnotesize, breaklines=true, captionpos=b, commentstyle=\color{mygreen}, escapeinside={\%*}{*)},keywordstyle=\color{blue}, stringstyle=\color{mymauve},}


#+begin_src latex
  \pagestyle{fancy}
  \fancyhf{}
  \fancyhead[R]{SEP2-FS}
  \fancyhead[L]{Design Patterns - Summary}
  \fancyfoot[CE,CO]{\leftmark}
  \fancyfoot[R]{\thepage}
  \fancyfoot[L]{Olivier Lischer}

  \begin{titlepage}
    \begin{center}
      {\Huge Design Patterns - Summary} \\
      \vspace{8 cm}

      \includegraphics[height=4cm]{./img/ost-logo.png}

      \vspace{4 cm}
      Semester: Spring 2022
      \vspace{1 cm}

      Version: 0.1.0 \\
      Date: \DTMnow \\
      \vspace{3 cm}
      School of Computer Science\\
      OST Eastern Switzerland University of Applied Sciences
    \end{center}
  \end{titlepage}
  \newpage
  \tableofcontents
  \newpage
#+end_src


* Introduction
** Most important quotes
In the introduction the basics of object-oriented programming are explained.
Therefore, for many this is easy to read.
However, some important statements are made.

#+begin_quote
Favor object composition over class inheritance
#+end_quote

Because it is very difficult to make the correct abstraction often the base class(es) are not complete or have too much in it.
With object composition you don't have this problem.

#+begin_quote
Program to an interface, not an implementation
#+end_quote
If you implement against interfaces you can test your class with unit tests.
If you implement against a fixed implementation you can not change this behavior at anytime.

** The design patterns

Class Design Patterns deal with the relationships between classes and their subclasses.
The Object Design Patterns with the object relationships which can be changed at runtime.

#+CAPTION: Design pattern space
#+NAME: fig:design-pattern-space
[[file:img/design_pattern_space.png]]


* Design Patterns
** Creational Patterns
*** Abstract Factory
The Abstract Factory provides an interface for creating families of related or dependent objects without specifying their concrete class.
It is a good choice, when you want to create big class hierarchy from a factory.
In general the Simple Factory is more common today.


Motivation:
- You want to create concrete objects without knowing which concrete type you get.
- You are only interested in the interface.


#+CAPTION: Abstract Factory Class Diagram
#+NAME: fig:abstract-factory-uml
[[file:img/abstract_factory.png]]

**** Important Notes
The Factory must be created at the very beginning of the application.
After creation only this factory must be used to create objects.
Otherwise, the benefit of the factory are gone.

*** Builder
The Builder Pattern seperates the construction of a complex class from its representation.
Therby you can hidde the creation of complex objects behind functions (see listening ref:lst:the-builder-pattern-in-action).


#+CAPTION: Builder Class Diagram
#+NAME: fig:builder-class-diagram
[[file:img/builder.png]]


#+CAPTION: The Builder Pattern in Action
#+NAME: lst:the-builder-pattern-in-action
#+begin_src c++
  Maze* MazeGame::CreateMaze () {
    Maze* aMaze = new Maze;
    Room* r1 = new Room(1);
    Room* r2 = new Room(2);
    Door* theDoor = new Door(r1, r2);
    aMaze->AddRoom(r1);
    aMaze->AddRoom(r2);
    r1->SetSide(North, new Wall);
    r1->SetSide(East, theDoor);
    r1->SetSide(South, new Wall);
    r1->SetSide(West, new Wall);
    r2->SetSide(North, new Wall);
    r2->SetSide(East, new Wall);
    r2->SetSide(South, new Wall);
    r2->SetSide(West, theDoor);
    return aMaze;
  }

  // With Builder Pattern
  Maze* MazeGame::CreateMaze (MazeBuilder& builder) {
    builder.BuildMaze();
    builder.BuildRoom(1);
    builder.BuildRoom(2);
    builder.BuildDoor(1, 2);
    return builder.GetMaze();
  }
#+end_src
*** Factory Method
The Factory Method is used to create an object, but the subclass decides which class is instantiated.
With this pattern you can create concrete creators which can decide which concrete product should be created.
The user of the creator only has to use the interface.


#+CAPTION: Factory Method Class Diagram
#+NAME: fig:factory-method-class-diagram
[[file:img/factory_method.png]]

*** Prototype
The prototype pattern is something similar like the factory method is for classes.
Using the prototype pattern you create copies from concrete objects.
This is achieved by cloning the prototype.


**** Important Notes
The crucial part of this pattern is the =Clone()= function.
During the implementation you have to decide if you want to do a deep copy or a shallow copy.


#+CAPTION: Prototype Class Diagram
#+NAME: fig:prototype-class-diagram
[[file:img/prototype.png]]


#+CAPTION: Prototype Design Patter in Action
#+NAME: fig:prototype-design-patter-in-action
#+begin_src c++
  class MazePrototypeFactory : public MazeFactory {
  public:
    MazePrototypeFactory(Maze*, Wall*, Room*, Door*);
    virtual Maze* MakeMaze() const;
    virtual Room* MakeRoom(int) const;
    virtual Wall* MakeWall() const;
    virtual Door* MakeDoor(Room*, Room*) const;
  private:
    vMaze* _prototypeMaze;
    Room* _prototypeRoom;
    Wall* _prototypeWall;
    Door* _prototypeDoor;
  };

  MazePrototypeFactory::MazePrototypeFactory (Maze* m, Wall* w, Room* r, Door* d) {
    _prototypeMaze = m;
    _prototypeWall = w;
    _prototypeRoom = r;
    _prototypeDoor = d;
  }

  Maze MazePrototypeFactory::MakeMaze () {
    return this->_prototypeMaze;
  }
#+end_src

*** Singleton
The Singleton pattern ensures that a class has only one (global) instance.
Additionally, it provides easy access to this element.

However, you should *NOT* use it in your software.
It is basically a global variable.
Therefore, not testable and difficult to maintain.

If you want something like singleton, you should use a simple factory which always returns the same instance.


#+CAPTION: Singelton alternative in code
#+NAME: lst:singelton-alternative-in-code
#+begin_src csharp
  class SingletonFactory {
      private static object myInstance;

      createObject() {
	  if (SingletonFactory.myInstance == null) {
	      SingletonFactory.myInstance = new();
	  }
	  return SingletonFactory.myInstance;
      }
  }
#+end_src

#+CAPTION: Singelton Class Diagram
#+NAME: fig:singelton-class-diagram
[[file:img/singleton.png]]

** Structural Patterns
*** Adapter
The Adapter Design Pattern is used to make a class compatible to others (like a power adapter).
The adapter pattern has two different types:
- class adapter
- object adapter


Both patterns do the same thing.
The class adapter inherits from the target *AND* from the adaptee (ref:fig:class-adapter-class-diagram).
The object adapter inherits only from the target and holds the adaptee as an instance variable (ref:fig:object-adapter-class-diagram).

The class adapter is not often used because many languages do not support multi-inheritance, and you should favor object composition over class inheritance.

#+CAPTION: Class Adapter Class Diagram
#+NAME: fig:class-adapter-class-diagram
[[file:img/class_adapter.png]]

#+CAPTION: Object Adapter Class Diagram
#+NAME: fig:object-adapter-class-diagram
[[file:img/object_adapter.png]]
*** Bridge
The Bridge Design Pattern is used to decouple an abstraction from its implementation so that the two can vary independently.

#+CAPTION: Bridge Class Diagram
#+NAME: fig:bridge-class-diagram
[[file:img/bridge.png]]

**** Example
Your application should support multiple window systems (X, Windows).
The client (your application) should be able to create windows, without committing to a concrete implementation.
Only your window implementation should depend on the target platform (X, Windows).

*** Composite
The Composite Design Pattern is used to model a part-whole hierarchy.
The pattern let clients treat individual and compositions of objects uniformly.

#+begin_src dot :file img/compsite_graph.png 
  digraph G {
   root [shape=box, label=aComposite]

   composite1 [shape=box, label=aComposite]
   leaf11 [label=aLeaf]
   leaf12 [label=aLeaf]
   leaf13 [label=aLeaf]

   leaf21 [label=aLeaf]
   leaf22 [label=aLeaf]
   leaf23 [label=aLeaf]

   root -> leaf11; 
   root -> leaf12; 
   root -> composite1
   root -> leaf13; 

   composite1 -> leaf21;
   composite1 -> leaf22;
   composite1 -> leaf23;
   }
#+end_src

#+CAPTION: A Composite Structure
#+NAME: fig:a-composite-structure
#+RESULTS:
[[file:img/compsite_graph.png]]


#+CAPTION: Composite Diagram
#+NAME: fig:composite-diagram
[[file:img/composite.png]]


**** Example
It exists many kinds of graphics and forms (Line, Rectangle, Picture, ...).
If the client wants to draw any graphic, it does not care how draw.
Therefore, we need one function (=draw=) for all kind of graphics.
However, a picture consists of many lines, rectangles and more graphics.
This picture class has some more functions (=Add=, =Remove=, =GetChild=).
The =Draw= function iterates over all children and calls their =Draw= function.




#+CAPTION: Example of Composite
#+NAME: fig:example-of-composite
[[file:img/example_of_composite.png]]
*** Decorator
The Decorater Pattern is used to attach additional responsibility (features) to an object dynamically.
For example, a class implements only the login mechanism.
Using the decorater pattern exception handling can be done in a separate class.


#+CAPTION: Decrater Diagram
#+NAME: fig:decrater-diagram
[[file:img/decorater.png]]

*** Facade
The Facade Design Pattern is used to provide a simple interface to set of interfaces (subsystem).
For example the Compiler class provide an easy to use interface for the whole compiler subsystem (figure ref:fig:facade-example).


#+CAPTION: Facade Use Case
#+NAME: fig:facade-use-case
[[file:img/use_case_facade.png]]


#+CAPTION: Facade Example 
#+NAME: fig:facade-example 
[[file:img/facade_example.png]]
*** Flyweight
The Flyweight pattern is used to support large number of objects efficiently.
For example, you can store every character in its own object.
In a document with 1000 characters you need more than 1000 objects.
The Flyweight pattern helps here.

In the Flyweight class is only state indecent stuff stored.
Therefore, the Flyweight is shareable.
Instead, creating every time a new object with the character "a" you always reference to the same object.


#+CAPTION: Flyweight Example
#+NAME: fig:flyweight-example
[[file:img/flyweight_example.png]]


#+CAPTION: Flyweight Class Diagram
#+NAME: fig:flyweight-class-diagram
[[file:img/flyweight.png]]

*** Proxy
The Proxy Design pattern provides a surrogate or placeholder for another object to control access to it.

A Feed Reader must load the news from a (slow) server.
When a frontend want to display the news before the data are availabel you have to provide a loading screen.
This can be easely done using the ProxyPattern.

The Proxy accepts the request, checks if the data are avaiable.
If not, it provides the login screen.
If the news are loaded, it returns the news.


#+CAPTION: Proxy Class Diagram
#+NAME: fig:proxy-class-diagram
[[file:img/proxy.png]]


#+CAPTION: Object Diagram for proxy
#+NAME: fig:object-diagram-for-proxy
[[file:img/proxy_object_diagram.png]]

** Behaviourla Patterns
*** Chain of Responsibility
The Chain of Responsibility is used to decouple the sender of a request to its receiver by giving more than one class the change to handle the request.
The first object takes the request, check if it can handle.
When yes, then handle it.
If not, forward the request to the parent / successor.


#+CAPTION: The Sequence of a Chain of Responsibility
#+NAME: fig:the-sequence-of-a-chain-of-responsibility
[[file:img/chain_of_responsibility_sequence.png]]

#+CAPTION: Chain of Responsibility Class Diagram
#+NAME: fig:chain-of-responsibility-class-diagram
[[file:img/chain_of_responsibility.png]]

*** Command
The command pattern is used to encapsulate actions / request inside an object.
For example, the design of a framework does not know which action the button should perform.
Therefore, the button is created using a command as parameter.
As soon as the user clicks on the button, the button executions the =command.Execute()= function.

#+CAPTION: Command Class Diagram
#+NAME: fig:command-class-diagram
[[file:img/command.png]]


#+CAPTION: Example of Command Pattern
#+NAME: fig:example-of-command-pattern
[[file:img/example_of_command.png]]

*** Interpreter
The Interpreter Design Pattern is used to interpret a simple grammar / language.
Every grammar rule is modeled as one subclass.


#+CAPTION: Interpreter Class Diagram
#+NAME: fig:interpreter-class-diagram
[[file:img/interpreter.png]]


**** Example
#+CAPTION: Interpreter Class Diagram for RegEx
#+NAME: fig:interpreter-class-diagram-for-regex
[[file:img/interpreter_regex.png]]

#+CAPTION: AST for RegEx "raining & (dogs | cats) *"
#+NAME: fig:ast-for-regex
[[file:img/interpreter_regex_ast.png]]


**** My thoughts
Before you implement your own interpreter consider a specialized library for this.
*** Iterator
The iterator design pattern is used to access the items in a [[id:9cf8949b-7cd7-4ba9-a379-bfaaf915475f][Data structure]] (Aggregate in figure ref:fig:iterator-class-diagram).
The benefit of iterator is that it hides the implementation details of the data structure.

#+begin_src rust
  let my_vec = vec![1, 10];
  let iter = my_vec.iter();
  let _ = iter.next();
  let _ = iter.next();
  // ...
#+end_src


#+CAPTION: Iterator Class Diagram
#+NAME: fig:iterator-class-diagram
[[file:img/iterator.png]]
