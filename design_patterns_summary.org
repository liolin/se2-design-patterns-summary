#+TITLE: Design Patterns - Summary
#+AUTHOR: Olivier Lischer
#+EMAIL: olivier.lischer@ost.ch

#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[table,xcdraw]{xcolor}
#+LATEX_HEADER: \usepackage{paralist}
#+LATEX_HEADER: \usepackage{datetime2}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{lscape}
#+LATEX_HEADER: \usepackage{longtable}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage[a4paper, left=3cm, right=3cm, top=2cm]{geometry}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{textcomp}
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{algpseudocode}

#+LATEX_HEADER: \setlist{noitemsep}
#+LATEX_HEADER: \setlength{\columnseprule}{0.2pt}
#+LATEX_HEADER: \definecolor{mygreen}{rgb}{0,0.6,0}
#+LATEX_HEADER: \definecolor{mygray}{rgb}{0.5,0.5,0.5}
#+LATEX_HEADER: \definecolor{mymauve}{rgb}{0.58,0,0.82}

#+LATEX_HEADER: \lstset{ backgroundcolor=\color{white}, basicstyle=\footnotesize, breaklines=true, captionpos=b, commentstyle=\color{mygreen}, escapeinside={\%*}{*)},keywordstyle=\color{blue}, stringstyle=\color{mymauve},}


#+begin_src latex
  \pagestyle{fancy}
  \fancyhf{}
  \fancyhead[R]{SEP2-FS}
  \fancyhead[L]{Design Patterns - Summary}
  \fancyfoot[CE,CO]{\leftmark}
  \fancyfoot[R]{\thepage}
  \fancyfoot[L]{Olivier Lischer}

  \begin{titlepage}
    \begin{center}
      {\Huge Design Patterns - Summary} \\
      \vspace{8 cm}

      \includegraphics[height=4cm]{./img/ost-logo.png}

      \vspace{4 cm}
      Semester: Spring 2022
      \vspace{1 cm}

      Version: 0.1.0 \\
      Date: \DTMnow \\
      \vspace{3 cm}
      School of Computer Science\\
      OST Eastern Switzerland University of Applied Sciences
    \end{center}
  \end{titlepage}
  \newpage
  \tableofcontents
  \newpage
#+end_src


* Introduction
** Most important quotes
In the introduction the basics of object-oriented programming are explained.
Therefore, for many this is easy to read.
However, some important statements are made.

#+begin_quote
Favor object composition over class inheritance
#+end_quote

Because it is very difficult to make the correct abstraction often the base class(es) are not complete or have too much in it.
With object composition you don't have this problem.

#+begin_quote
Program to an interface, not an implementation
#+end_quote
If you implement against interfaces you can test your class with unit tests.
If you implement against a fixed implementation you can not change this behavior at anytime.

** The design patterns

Class Design Patterns deal with the relationships between classes and their subclasses.
The Object Design Patterns with the object relationships which can be changed at runtime.

#+CAPTION: Design pattern space
#+NAME: fig:design-pattern-space
[[file:img/design_pattern_space.png]]


* Creational
** Abstract Factory
The Abstract Factory provides an interface for creating families of related or dependent objects without specifying their concrete class.
It is a good choice, when you want to create big class hierarchy from a factory.
In general the Simple Factory ([[id:0c32236d-c1d6-439a-b87e-74380041c3af][Design Pattern - Simple Factory]]) is more common today.


Motivation:
- You want to create concrete objects without knowing which concrete type you get.
- You are only interested in the interface.


#+CAPTION: Abstract Factory Class Diagram
#+NAME: fig:abstract-factory-uml
[[file:img/abstract_factory.png]]

*** Important Notes
The Factory must be created at the very beginning of the application.
After creation only this factory must be used to create objects.
Otherwise, the benefit of the factory are gone.

** Builder
The Builder Pattern seperates the construction of a complex class from its representation.
Therby you can hidde the creation of complex objects behind functions (see listening ref:lst:the-builder-pattern-in-action).


#+CAPTION: Builder Class Diagram
#+NAME: fig:builder-class-diagram
[[file:img/builder.png]]


#+CAPTION: The Builder Pattern in Action
#+NAME: lst:the-builder-pattern-in-action
#+begin_src c++
  Maze* MazeGame::CreateMaze () {
    Maze* aMaze = new Maze;
    Room* r1 = new Room(1);
    Room* r2 = new Room(2);
    Door* theDoor = new Door(r1, r2);
    aMaze->AddRoom(r1);
    aMaze->AddRoom(r2);
    r1->SetSide(North, new Wall);
    r1->SetSide(East, theDoor);
    r1->SetSide(South, new Wall);
    r1->SetSide(West, new Wall);
    r2->SetSide(North, new Wall);
    r2->SetSide(East, new Wall);
    r2->SetSide(South, new Wall);
    r2->SetSide(West, theDoor);
    return aMaze;
  }

  // With Builder Pattern
  Maze* MazeGame::CreateMaze (MazeBuilder& builder) {
    builder.BuildMaze();
    builder.BuildRoom(1);
    builder.BuildRoom(2);
    builder.BuildDoor(1, 2);
    return builder.GetMaze();
  }
#+end_src
** Factory Method
The Factory Method is used to create an object, but the subclass decides which class is instantiated.
With this pattern you can create concrete creators which can decide which concrete product should be created.
The user of the creator only has to use the interface.


#+CAPTION: Factory Method Class Diagram
#+NAME: fig:factory-method-class-diagram
[[file:img/factory_method.png]]

** Prototype
